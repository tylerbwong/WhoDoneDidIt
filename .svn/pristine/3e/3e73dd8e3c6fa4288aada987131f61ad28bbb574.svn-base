package whodonedidit.gui;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import javax.swing.AbstractAction;
import javax.swing.JButton;
import javax.swing.JLayeredPane;
import javax.swing.KeyStroke;

/**
 *
 * @author Tyler Wong
 */
public class RulesPanel extends javax.swing.JPanel
{

    private MainFrame frame;
    JLayeredPane layerPane;
    private boolean inGame;

    /**
     * Creates new form Rules
     */
    public RulesPanel(MainFrame frame, JLayeredPane layerPane)
    {
        this.frame = frame;
        this.layerPane = layerPane;
        BackAction backAction = new BackAction(this);
        initComponents();
        this.backButton.getInputMap(JButton.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_F3, 0), "pressed");
        this.backButton.getActionMap().put("pressed", backAction);
    }

    class BackAction extends AbstractAction
    {

        RulesPanel panel;

        public BackAction(RulesPanel panel)
        {
            this.panel = panel;
        }

        @Override
        public void actionPerformed(ActionEvent e)
        {
            System.out.println("Closed rules");
            layerPane.remove(layerPane.getIndexOf(panel));
            layerPane.repaint();
            layerPane.validate();
        }
    }

    public void setInGame(boolean inGame)
    {
        this.inGame = inGame;
    }

    public JButton getBackButton()
    {
        return this.backButton;
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        titleLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        rulesArea = new javax.swing.JTextArea();
        backButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setBounds(new java.awt.Rectangle(0, 0, 1024, 768));
        setFont(new java.awt.Font("Roboto", 0, 13)); // NOI18N
        setMaximumSize(new java.awt.Dimension(1024, 768));

        titleLabel.setBackground(new java.awt.Color(255, 255, 255));
        titleLabel.setFont(new java.awt.Font("Roboto", 0, 48)); // NOI18N
        titleLabel.setText("Rules");

        rulesArea.setEditable(false);
        rulesArea.setColumns(20);
        rulesArea.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        rulesArea.setLineWrap(true);
        rulesArea.setRows(5);
        rulesArea.setText("PLAY\n\nThe dealer plays first. Play passes to the left. On your turn, you:\n1. Take the top Action card from the Draw Pile and add it to your hand.\n2. Play one of your two Action cards (see \"Playing Action Cards\" below).\n3. Conclude your turn by checking off the identity of any Clue cards you were shown during your turn. Feel free to keep notes on your notesheet, such as what you see happening during other players' turns.\n4. Unless you are ready to make an Accusation (see \"Making an Accusation\"), your turn now ends. Place the Action card you just played on the discard pile. The player to your left now takes his turn.\n\nPlaying Action Cards\nThere are five different types of Action cards. To play an Action card (except a Private Tip), simply take the card from your hand and place it face up on the table in front of you.\n\n* MAKE A SUGGESTION from any destination\nDecide which Destination will be part of your Suggestion. If the destination is different than the one you are in, exchange your current Destination Marker for the desired destination. If another player has this Destination Marker, give that player yours in return. If the desired marker is by the tray, exchange it with your marker. once the desired Destination Marker is before you, make your Suggestion(see \"Making a Suggestion\").\n\n* MAKE A SUGGESTION from current destination (or move)\nYou may only make a Suggestion from the destination whose Destination Marker is currently before you OR you can exchange the Destination Marker for another - but if you do so, you end your turn without making a Suggestion (see \"Making a Suggestion\").\n\n* SNOOP\nSelect an opponent to lay his entire hand, face down, on the table. Pick any one card and look at it, taking care that no other player sees its identity. Return the card to the opponent who then picks up his entire hand.\n\n* ALL SNOOP means that each player will place his entire hand face down towards the player indicated on the card. Each player then snoops on the hand offered to him.\n\n* SUPER SLEUTH (Not Available in Version 1.0)\nRead aloud the card and show it to your opponents. Each, in turn, must now show you one Clue card with the specified feature. (For example, \"Show me a destination in the south.\")  If a player doesn't have a card of the kind specified, he shows nothing.\n\n* PRIVATE TIP\nPass this card face down to an opponent who picks it up and reads it to himself. He then returns this card, along with one Clue card of the type requested (or all cards held of this type, if so instructed by the Private Tip card). If the opponent has no cards of the type requested, he returns only the Private Tip card. Return Clue card(s) to the opponent after studying them. IMPORTANT: After playing a \"Private Tip\" card place, it under the discard pile, face-down\n\n\nEnding your Turn\nAfter you have played an Action card, place it face up in the discard pile, unless you played a Private Tip. The identity of these cards needs to be kept secret from your opponents, so place them down.\n\nMaking a Suggestion\n\nTo make a Suggestion, name a Suspect, Vehicle and the Destination whose marker is before you.\n\nExample: \"I suggest that Professor Plum is traveling in the Hot Air Balloon, to the Grand Canyon.\"\n\nMaking Suggestions throughout the game will help you to determine - by process of elimination - which three cards comprise the SOLUTION.\n\nProving a Suggestion True or False\nAs soon as you make a Suggestion, your opponents, in turn, try to prove it false. The first to try is the player on your left. That player looks at his cards to see if one of the three cards you just named is there. If so, he must show it to you and no one else. If the player has more than one of the cards named, he selects just one to show you. If that opponent has none of the cards that you named, then the chance to prove your Suggestion false passes, in turn, to the next player on the left.\n\nAs soon as any opponent shows you one of the cards you named, it is proof that this card cannot be part of the solution. End your turn by checking off this card on your notesheet. (Some players also find it helpful to mark the initials of the player who showed the card.) If no one is able to prove your Suggestion false, you may either end your turn or make an Accusation.\n\nSpecial Note about Suggestions\nWhen you make a Suggestion, you may, if you wish, name one or more of the cards that you hold in your hand. This can help to pinpoint information or to mislead your opponents.\n\n\nMaking an Accusation\n\nWhen you think you have figured out which three cards comprise the Solution, you should make an Accusation on your turn. You may do so after you play an Action card, or if you are convinced you know the Solution, you may make an Accusation without playing an Action card. Do so by naming the three elements you believe will be in found in the Solution. Begin by saying, \"I accuse (Suspect) of committing the crime. He/she in traveling to (Destination) in the (Vehicle).\" Then, taking care that no one else sees, look at the three Clue cards of the Solution.\n\nNote: In a Suggestion, the Destination you name must be the same as the Destination Marker before you. In an Accusation, you may name any destination. Also remember that you may make only one Accusation per game.\n\nWinning\n\nIf your Accusation is correct (that is, the three elements you named are in the Solution), show the other players the cards and claim your victory. Great detective work! You win!\n\nIf your Accusation is incorrect...\nSecretly return all three cards of the Solution face-down.\nBe careful not to blurt out any part of the solution.\nYou remain in the game but make no further plays, so you cannot win.\nYou continue to try to prove your opponents' Suggestions false.\nOpponents may still exchange Destination markers with you as usual.");
        rulesArea.setCaretPosition(0);
        jScrollPane1.setViewportView(rulesArea);

        backButton.setBackground(new java.awt.Color(255, 255, 255));
        backButton.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        backButton.setText("Back");
        backButton.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseEntered(java.awt.event.MouseEvent evt)
            {
                backButtonMouseEntered(evt);
            }
        });
        backButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                backButtonActionPerformed(evt);
            }
        });
        backButton.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                backButtonKeyPressed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(48, 48, 48)
                        .add(titleLabel))
                    .add(layout.createSequentialGroup()
                        .add(104, 104, 104)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 808, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(backButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 135, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(112, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(49, 49, 49)
                .add(titleLabel)
                .add(31, 31, 31)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 478, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(38, 38, 38)
                .add(backButton)
                .addContainerGap(85, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        if (!this.inGame)
        {
            this.frame.removePanel(this);
            this.frame.createMainMenuPanel();
        }
        else
        {
            System.out.println("Closed rules");
            this.layerPane.remove(this.layerPane.getIndexOf(this));
            this.layerPane.repaint();
            this.layerPane.validate();
        }
    }//GEN-LAST:event_backButtonActionPerformed

    private void backButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_backButtonKeyPressed
        this.backButton.requestFocus();
    }//GEN-LAST:event_backButtonKeyPressed

    private void backButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backButtonMouseEntered
        this.backButton.requestFocus();
    }//GEN-LAST:event_backButtonMouseEntered
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea rulesArea;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
